一. Go可执行程序项目的典型结构布局：

$tree -F exe-layout 
exe-layout
├── cmd/
│   ├── app1/
│   │   └── main.go
│   └── app2/
│       └── main.go
├── go.mod
├── go.sum
├── internal/
│   ├── pkga/
│   │   └── pkg_a.go
│   └── pkgb/
│       └── pkg_b.go
├── pkg1/
│   └── pkg1.go
├── pkg2/
│   └── pkg2.go
└── vendor/


1. cmd 目录。cmd 目录就是存放项目要编译构建的可执行文件对应的 main 包的源文件。
如果你的项目中有多个可执行文件需要构建，每个可执行文件的 main 包单独放在一个子目录中，
比如上面的 app1、app2，cmd 目录下的各 app 的 main 包将整个项目的依赖连接在一起。
而且通常来说，main 包应该很简洁。我们在 main 包中会做一些命令行参数解析、资源初始化、日志设施初始化、
数据库连接初始化等工作，之后就会将程序的执行权限交给更高级的执行控制对象。
另外，也有一些 Go 项目将 cmd 这个名字改为 app 或其他名字，但它的功能其实并没有变。

2. pkgN 目录，这是一个存放项目自身要使用、同样也是可执行文件对应 main 包所要依赖的库文件，
同时这些目录下的包还可以被外部项目引用。

3. go.mod 和 go.sum，它们是 Go 语言包依赖管理使用的配置文件。
我们前面说过，Go 1.11 版本引入了 Go Module 构建机制，
这里我建议你所有新项目都基于 Go Module 来进行包依赖管理，因为这是目前 Go 官方推荐的标准构建模式。
对于还没有使用 Go Module 进行包依赖管理的遗留项目，比如之前采用 dep、glide 等作为包依赖管理工具的，
建议尽快迁移到 Go Module 模式。
Go 命令支持直接将 dep 的 Gopkg.toml/Gopkg.lock 或 glide 的 glide.yaml/glide.lock 转换为 go.mod。

4. 最后我们再来看看 vendor 目录。
vendor 是 Go 1.5 版本引入的用于在项目本地缓存特定版本依赖包的机制，
在 Go Modules 机制引入前，基于 vendor 可以实现可重现构建，保证基于同一源码构建出的可执行程序是等价的。

vendor 目录视为一个可选目录。原因在于，Go Module 本身就支持“可重现构建”，而无需使用 vendor。 
当然 Go Module 机制也保留了 vendor 目录
（通过 go mod vendor 可以生成 vendor 下的依赖包，通过 go build -mod=vendor 可以实现基于 vendor 的构建）。
一般我们仅保留项目根目录下的 vendor 目录，否则会造成不必要的依赖选择的复杂性。

可重现构建，顾名思义，就是针对同一份go module的源码进行构建，不同人，在不同机器(同一架构，比如都是x86-64)，
相同os上，在不同时间点都能得到相同的二进制文件。

如果 Go 可执行程序项目有一个且只有一个可执行程序要构建，我们可以将上面项目布局进行简化：

$tree -F -L 1 single-exe-layout
single-exe-layout
├── go.mod
├── internal/
├── main.go
├── pkg1/
├── pkg2/
└── vendor/

二. Go库项目的典型结构布局

$tree -F lib-layout 
lib-layout
├── go.mod
├── internal/
│   ├── pkga/
│   │   └── pkg_a.go
│   └── pkgb/
│       └── pkg_b.go
├── pkg1/
│   └── pkg1.go
└── pkg2/
    └── pkg2.go

库类型项目相比于Go可执行程序项目的布局要简单一些。
因为这类项目不需要构建可执行程序，所以去除了cmd目录。

Go 库项目的初衷是为了对外部（开源或组织内部公开）暴露 API，对于仅限项目内部使用而不想暴露到外部的包，
可以放在项目顶层的 internal 目录下面。当然 internal 也可以有多个并存在于项目结构中的任一目录层级中，
关键是项目结构设计人员要明确各级 internal 包的应用层次和范围。

对于有一个且仅有一个包的 Go 库项目来说，我们也可以将上面的布局做进一步简化：

$tree -L 1 -F single-pkg-lib-layout
single-pkg-lib-layout
├── feature1.go
├── feature2.go
├── go.mod
└── internal/