为什么要学习Go语言？
GO语言的优势在于简洁易上手，并且强大的并发处理能力（得益于Goroutine），效率高于Java、Python，并且Google背书。
像Docker，k8s，etcd等都是Go语言编写的。
目前Go语言就业在美国国内薪水也超越了Java排名第一。

1. Go中变量声明和赋值的符号说明
1） “:=” 表示声明并赋值，系统自动判定类型，比如 a := 3；
2） “=” 必须先用var声明后再赋值，比如var a int; a = 3;
3)  也可以看出Go中变量定义（变量名 类型）与Java、C是反过来的

2. Go中的空指针
Go中的空指针为nil,不是null

3. Go数组和切片的声明和赋值
1）数组的声明和赋值
var nums [10]float32 声明一个有10个元素的float32类型的数组
nums = {1,2,3}

2）切片的声明和初始化
var nums []float32  声明一个float32类型的切片，就相当于Java中List,大小是动态的
切片需要使用make函数初始化后才能使用：
nums = make([]float32, len, capacity)
capacity是当前切片的容量，当元素个数快超过capacity时，使用append时，切片底层会自动扩容，
策略是扩充到现在的两倍，len(nums)、cap(nums)分别求切片的长度和容量

3）数组和切片也可以直接声明并赋值：nums := [3]{1,2,3}; nums := [...]{1,2,3} 
nums：= make([]float32, len, capacity); 
nums ：= []int{1,2,3} 没有指定长度就是切片，否则就是数组

4) 数组可以转化为切片： qiepian = shuzu[:]
切片实际是一个结构体：
type slice struct {
    array unsafe.Pointer //指向存放数据的数组指针
    len   int            //长度有多大
    cap   int            //容量有多大
}

5) Go语言中，数据是值传递的，而切片是传的引用
Go 语言中，函数参数传递采用是值传递的方式。
所谓“值传递”，就是将实际参数在内存中的表示逐位拷贝（Bitwise Copy）到形式参数中。
对于像整型、数组、结构体这类类型，它们的内存表示就是它们自身的数据内容，
因此当这些类型作为实参类型时，值传递拷贝的就是它们自身，传递的开销也与它们自身的大小成正比。

但是像 string、切片、map 这些类型就不是了，它们的内存表示对应的是它们数据内容的“描述符”。
当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述符”，不包括数据内容本身，
所以这些类型传递的开销是固定的，与数据内容大小无关。
这种只拷贝“描述符”，不拷贝实际数据内容的拷贝过程，也被称为“浅拷贝”。

不过函数参数的传递也有两个例外，当函数的形参为接口类型，或者形参是变长参数时，简单的值传递就不能满足要求了，
这时 Go 编译器会介入：对于类型为接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参；
对于为变长参数的形参，Go 编译器会将零个或多个实参按一定形式转换为对应的变长形参。

变长参数实际上是通过切片来实现的，可以通过打印看到其类型。

4. map的声明和使用
m := map[string]int{"one": 1, "two": 2, "three": 3} 
m1 := map[string]int{} 
m1["one"] = 1 
m2 := make(map[string]int, 10 /*Initial Capacity*/)
delete(m, "a") 按照key删除一个元素
v, ok := m["a"]  ok 为 true表示元素存在
Go语言中没有set，但是可以直接用value为bool类型的map来模拟即可-> m := map[string]bool{}

5. 结构体类似于C语言
1). 定义
type User struct {
	Name    string
	Age     int
	address string
}
变量首字母为小写则是私有变量，别的包不能访

2）初始化
直接初始化：
var user User = User{
	Name:    "luoji",
	Age:     29,
	address: "Chengdu",
}

使用结构体指针：
var user *User = &User{
	Name:    "luoji",
	Age:     29,
	address: "Chengdu",
} 对于结构体指针来说user.Name进行访问时实际上底层用了(*user).Name，和C语言中指针实际是一样的原理
结构体指针也可以用new关键字来初始化：user := new(User), new出来的是指针   user.Name = ....

如果没有对结构体中的字段进行初始化，则为对应类型的默认值，比如字符串就是个空串

2). 结构体是值传递的，如果想要在函数中修改结构体的内部变量值，则需要传入指针


6. 常量定义
const (
	Readable = 1 << iota
	Writeable
	Executable
)
其中，iota是一个自增变量，在第一行时为0，第二行为1，第三行为2
所以结果依次是1 << 0 = 1, 1 << 1 = 2, 1 << 2 = 4
1 2 4

7. 运算符
和其它语言差不多，但是：
1) 只有a++，没有++a
2) 使用==比较两个数组，如果数组中元素个数、顺序、值都保持一致，则返回true
3) 比较字符串是否相等可以直接用==
4）&^是特有的运算符号，&^ 运算符叫做 AND NOT。它是一个 使用 AND 后，再使用 NOT 操作的简写。
比如3&^1 = 2，表示将3(11) & 1(01) = 01，再NOT bit反转 -> 2(10)
位运算：
&    位与
|    位或
^    异或
&^   位与非
<<   左移
>>   右移


8. if、switch与其它语言差不多使用即可，但是Go支持变量赋值：
if  var declaration;  condition {      // code to be executed if condition is true }
condition 表达式结果必须为布尔值
Go的switch语句不用加break

9. for循环遍历
1）for i,num := range nums {
	....
} nums是一个数组或者切片，如果不想遍历i,则用“_”代替

2) for k,v := range mymap {
	....
} k,v分别是map的key和value

3) 同其他语言一样的 for i := 0; i < 3; i++


10. interface{}，代表一个类似void*的指针，可以指向任何不同类型的数据
var f interface{}
f = 3.25
if v, ok := f.(float64); ok {
	t.Log(v, "是float64类型")
} else {
	t.Log(v, "是其它类型")
}

v, ok := f.(float64) 其中f必须是interface{}类型，若ok为true,代表就是float64类型

11. interface
Go语言的面向对象通过interface实现，但是Go语言没有Java那种继承关系
如果一个对象看起来是某种接口类型的实现，那么它就可以作为该接口类型使用，这就是Go的面向对象
即皮卡丘和雷丘都是电老鼠，皮卡丘和雷丘就是电老鼠类型，它们都具有电老鼠的一般特性；
可达鸭看起来像鸭子，它就是鸭子类型，具有鸭子的一般特性

12. func
1) Go语言中函数可以有多个返回值 :func Devide(a int, b int) (int, bool)
2) 函数可以用作入参和返回值
3) 函数可以和接口绑定
func(p Publish) xxx()
func(p *Publish) xxx()
其中Publish是一个interface。 这样可以直接使用p.xxx()

13. 字符串
Go中的字符串是一种数据类型，默认为空串，而不是nil

// $GOROOT/src/reflect/value.go
// StringHeader是一个string的运行时表示
type StringHeader struct {
    Data uintptr
    Len  int
}
string 类型其实是一个“描述符”，它本身并不真正存储字符串数据，
而仅是由一个指向底层存储的指针和字符串的长度字段组成的。

len(str)求出的是字符串占用的byte(字节)数量，a-z英文字符占1个字节，但是中文可能占2-3个字节
字符串遍历和数组遍历一样用range即可
字符串底层实现时一个[]byte数组，可以用[]byte(s)将字符串s强转为byte数组
[]rune(s)则是转化为utf8字符集表示
一个utf8中文字符可能占用是2-3个字节

14.defer
defer后的东东，在return之前执行

defer 关键字后面只能接函数（或方法），这些函数被称为 deferred 函数。
defer 将它们注册到其所在 Goroutine 中，用于存放 deferred 函数的栈数据结构中，
这些 deferred 函数将在执行 defer 的函数退出前，按后进先出（LIFO）的顺序被程序调度执行
无论是执行到函数体尾部返回，还是在某个错误处理分支显式 return，又或是出现 panic，已经存储到 deferred 函数栈中的函数，都会被调度执行。
所以说，deferred 函数是一个可以在任何情况下为函数进行收尾工作的好“伙伴”。


15. %p输出地址，%T输出类型，%v输出数组，切片，结构体； %#v可以输出结构体更详细的信息

16. make和new的区别：make只能为slice,map,channel三种类型分配内存;
new可以为所有指针类型分配内存

17. Go语言没有异常处理, 一般是在返回值中带上error信息。 
提供了一个error接口：
type error interface {
	Error() string
}
通过errors.New可以方便创建一个error对象
panic 用于不不可以恢复的错误，退出前会执⾏ defer 指定的内容。panic更像是Java中的异常，用于描述“不可预见的错误”。
os.Exit 退出时不不会调⽤用 defer 指定的函数，退出时不不输出当前调⽤用栈信
recover一般适用于应用程序全局的未处理错误而不是某个函数。类似于Java异常处理Catch到异常后的处理

如果某个goroutine发生panic且没有被捕获，会导致整个Go程序退出，而不是只影响panic的goroutine.


18. 协程
1）理解协程
协程是轻量级的线程，在Go语言中被称为goroutine
一个goroutine会以一个很小的栈（2K或4K）启动，当遇到深度递归导致当前栈空间不足时，
goroutine会根据需要动态的提升栈的大小（主流实现最大可到1GB）
goroutine启动代价小，可以有成千上万个goroutine
Go语言调度器可以使得在n个操作系统线程上调度m个goroutine,即goroutine和操作系统线程时m:n的关系，
而m可以远大于n,这样就大大减少了用户态和内核态和交互，所以提升了并发的性能
2）协程的顺序一致性
同一个goroutine A内部，顺序一致性是能得到保证的，但是其它goroutine B看A时，顺序却不一定得到保证。
比如goroutine A中，a=1 b=2,在另一个goroutine中，两句话不一定谁先谁后
3）Go中，main函数退出时程序结束，除非在退出前使用了“阻塞”，否则不会等待任何后台线程/协程
因为goroutine的执行和main函数返回事件是并发的，谁都可以先发生

19. Go的连续动态栈
Go1.4以后采用连续动态栈，即在连续内存中表示一个栈。 连续内存能提高访问效率，
但是随之而来也引入了新的问题:当连续栈动态增长时，可能需要将之前已经使用过的内存挪动到别的地方，
这部分数据地址也会随之改变。
所以，不要在Go中长期保存一个地址并使用它。

20. channel
1）理解channel
Go 程序员中有句格言：不要以共享内存方式通信，要以通信方式共享内存（Don’t communicate by sharing memory, share memory by communicating）
Go中推荐使用channel来进行goroutine之间的通信
你可以简单地把 Go 实现的 CSP 模型类比为生产者 - 消费者模式，而 channel 可以类比为生产者 - 消费者模式中的阻塞队列。
不过，需要注意的是 Go 中 channel 的容量可以是 0，容量为 0 的 channel 在 Go 中被称为无缓冲的 channel，
容量大于 0 的则被称为有缓冲的 channel。

针对 channel ch 的类型不同，len(ch) 有如下两种语义：
当 ch 为无缓冲 channel 时，len(ch) 总是返回 0；
当 ch 为带缓冲 channel 时，len(ch) 返回当前 channel ch 中尚未被读取的元素个数。
而cap(ch)返回的是信道的容量

channel 原语用于多个 Goroutine 间的通信，一旦多个 Goroutine 共同对 channel 进行收发操作，
len(channel) 就会在多个 Goroutine 间形成“竞态”。
单纯地依靠 len(channel) 来判断 channel 中元素状态，是不能保证在后续对 channel 的收发时 channel 状态是不变的。

但两种场景可以使用：
一个是“多发送单接收”的场景，也就是有多个发送者，但有且只有一个接收者。在这样的场景下，
我们可以在接收 goroutine 中使用len(channel)是否大于0来判断是否 channel 中有数据需要接收。
另一个是“多接收单发送”的场景，也就是有多个接收者，但有且只有一个发送者。在这样的场景下，
我们可以在发送 Goroutine 中使用len(channel)是否小于cap(channel)来判断是否可以执行向 channel 的发送操作。

2) channel的使用
创建一个可以传递bool类型值的无法缓冲channel：var ch = make(chan bool)
发送 : ch<-true 将true写入channel
接收 : v := <-ch 
无缓冲的channel发送操作总是在接收操作之前完成
无缓冲channel必须收发配对，否则信道将阻塞，发生死锁。就像快递一样，快递员<->用户。
无缓冲信道收和发都会发生阻塞。

指定第二个参数则定义有缓冲信道：
var ch = make(chan bool, 3) 这样就定义了一个缓存大小为3的channel.
则有cap(ch) = 3
当缓存满的情况下，才会阻塞向channel中发送数据；同样，只有缓存为空时才会阻塞从channel中接收数据
在容量为C的channel上的第k个接收先行发生于从这个channel上的第k+C次发送完成.
（举个例子，容量为3，那么发的第1个包，一定比第4个早发送完成，但不保证第1个包和第2个包谁先谁后）
可以通过带缓冲的channel来实现计数信号量：channel中的元素数量对应着活动的数量，
channel的容量表示同时活动的最大数量，发送元素获取信号量，接收元素释放信号量，这是限制并发的通常用法。
var limit = make(chan int, 3)
func main() {
    for _, w := range work {   
         go func(w func()) {
            limit <- 1
            w()
            <-limit
        }(w)
    }
    select{}
}
这些goroutine通过有限制的channel来确保最多同时执行三个工作函数（w）
更建议使用sync.WaitGroup

唯送信道： ch := make(chan<-int) 即只能往信道中发送数据
唯收信道： ch := make(<-chan int) 即只能从信道中读取数据
tips:看<-在chan的左边还是右边，在左边就是唯收，右边就是唯送
意义：函数的入参定义，可以限制唯送或者唯收，但是传入的实际变量可以是双向的

close(ch)关闭一个信道。
for x := range ch接收信道数时，遇到信道关闭，接收方仍然可以从信道中取到数据，读取完后会退出循环。
如果信道中没有数据，也没有关闭信道则会阻塞。
向关闭的信道发送数据会导致panic
v,ok := <-ch 可以用第二个参数ok判断信道是否已经关闭，ok为false说明信道已经关闭

nil channel
如果一个 channel 类型变量的值为 nil，我们称它为 nil channel。
nil channel 有一个特性，那就是对 nil channel 的读写都会发生阻塞。

func main() {
	var c chan int
	<-c //阻塞
}

或者：

func main() {
	var c chan int
	c<-1  //阻塞
}


21. sync.WaitGroup的使用
var wg sync.WaitGroup
wg.Add(2) 添加或减少等待的goroutine数量
wg.Done() 相当于wg.Add(-1)
wg.Wait() 直到goroutine数量变为0，否则一直阻塞

22. Go语言中也有类似Java中的锁
互斥锁： var mu sync.Mutex
mu.Lock() .... mu.UnLock()
读写锁：var rw sync.RWMutex   
rw.Lock()/rw.UnLock()就是写锁，上了写锁，读写都是互斥的
rw.RLock()/rw.RUnLock()就是读锁，读锁读不互斥，写互斥
读多写少的时候读写锁效率会比较高。

什么时候使用同步原语？
一般情况下，我建议你优先使用 CSP 并发模型进行并发程序设计。
但是在下面一些场景中，我们依然需要 sync 包提供的低级同步原语：
1）无论是在单 Goroutine 情况下，还是在并发测试情况下，sync.Mutex实现的同步机制的性能，都要比 channel 实现的高出三倍多。
因此，通常在需要高性能的临界区（critical section）同步机制的情况下，sync 包提供的低级同步原语更为适合。
2）第二种就是在不想转移结构体对象所有权，但又要保证结构体内部状态数据的同步访问的场景。
基于 channel 的并发设计，有一个特点：在 Goroutine 间通过 channel 转移数据对象的所有权。
所以，只有拥有数据对象所有权（从 channel 接收到该数据）的 Goroutine 才可以对该数据对象进行状态变更。
如果你的设计中没有转移结构体对象所有权，但又要保证结构体内部状态数据在多个 Goroutine 之间同步访问，
那么你可以使用 sync 包提供的低级同步原语来实现，比如最常用的sync.Mutex。

“不应复制那些包含了此包中类型的值！！！”
一旦 Mutex 类型变量被拷贝，原变量与副本就各自发挥作用，互相没有关联了。
甚至，如果拷贝的时机不对，比如在一个 mutex 处于 locked 的状态时对它进行了拷贝，就会对副本进行加锁操作，
将导致加锁的 Goroutine 永远阻塞下去。

所以，在使用 sync 包中的类型的时候，我们推荐通过闭包方式，
或者是传递类型实例（或包裹该类型的类型实例）的地址（指针）的方式进行

23.重点注意一下，append()这个函数在 cap 不够用的时候，就会重新分配内存以扩大容量，
如果够用，就不会重新分配内存了。

24.Go性能优化参考
如果需要把数字转换成字符串，使用 strconv.Itoa() 比 fmt.Sprintf() 要快一倍左右。
尽可能避免把String转成[]Byte ，这个转换会导致性能下降。
如果在 for-loop 里对某个 Slice 使用 append()，请先把 Slice 的容量扩充到位，这样可以避免内存重新分配以及系统自动按 2 的 N 次方幂进行扩展但又用不到的情况，从而避免浪费内存。
使用StringBuffer 或是StringBuild 来拼接字符串，性能会比使用 + 或 +=高三到四个数量级。
尽可能使用并发的 goroutine，然后使用 sync.WaitGroup 来同步分片操作。
避免在热代码中进行内存分配，这样会导致 gc 很忙。尽可能使用  sync.Pool 来重用对象。
使用 lock-free 的操作，避免使用 mutex，尽可能使用 sync/Atomic包（关于无锁编程的相关话题，可参看《无锁队列实现》或《无锁 Hashmap 实现》）。
使用 I/O 缓冲，I/O 是个非常非常慢的操作，使用 bufio.NewWrite() 和 bufio.NewReader() 可以带来更高的性能。
对于在 for-loop 里的固定的正则表达式，一定要使用 regexp.Compile() 编译正则表达式。性能会提升两个数量级。
如果你需要更高性能的协议，就要考虑使用 protobuf 或 msgp 而不是 JSON，因为 JSON 的序列化和反序列化里使用了反射。
你在使用 Map 的时候，使用整型的 key 会比字符串的要快，因为整型比较比字符串比较要快。

25. go get 下载超时，则使用Go代理 https://goproxy.io/zh/docs/getting-started.html

26. log.Fatal会调用ox.Exit, 导致程序退出，并且defer里内容也不会执行。所以一般仅用于main函数里和init初始
化函数里。

27. goutine使用的3个要点
1）调用一个函数，应该由调用者决定是否启动一个goroutine，而不是在函数内部去启动一个goroutine,
即谁去用，则谁启动goroutine;
2）启动了一个goroutine,应该知道这个gotoutine什么时候结束;
3）要能够管控一个goroutine什么时候退出，无论是用channel推出还是使用context超时退出。
比如，发生某个err的时候，向channel发送一个退出信。

28. 空导入
像下面代码这样的包导入方式被称为“空导入”：
                   
import _ "foo"
                                                                                       
空导入也是导入，意味着我们将依赖foo这个路径下的包。
但由于是空导入，我们并没有显式使用这个包中的任何语法元素。
那么空导入的意义是什么呢？由于依赖foo包，程序初始化的时候会沿着包的依赖链初始化foo包，
包的初始化会按照常量->变量->init函数的次序进行。
通常实践中空导入意味着期望依赖包的init函数得到执行，这个init函数中有我们需要的逻辑。

29. sync.Cond
sync.Cond是传统的条件变量原语概念在 Go 语言中的实现。
我们可以把一个条件变量理解为一个容器，这个容器中存放着一个或一组等待着某个条件成立的 Goroutine。
当条件成立后，这些处于等待状态的 Goroutine 将得到通知，并被唤醒继续进行后续的工作。
sync.Cond为 Goroutine 在这个场景下提供了另一种可选的、资源消耗更小、使用体验更佳的同步方式。
详细见cond_test.go

30. atomic
atomic 包封装了 CPU 实现的部分原子操作指令，为用户层提供体验良好的原子操作函数，
因此 atomic 包中提供的原语更接近硬件底层，也更为低级，它也常被用于实现更为高级的并发同步技术，
比如 channel 和 sync 包中的同步原语。
详细见atomic_test.go